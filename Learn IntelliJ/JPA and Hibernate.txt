JPA = Java Persistence API

How to start a Spring Boot Project with JPA, Hibernate, JDBC and H2 DB:
=======================================================================
Goto https://start.spring.io
Choose Maven as build tool, Java as language
Group name is the Package name
Artifact name is the ApplicationName
Packaging choose Jar
Choose Latest Java Version.
Add dependency for the following
1. Spring.Web
2. JPA
3. JDBC
4. H2

In the application.propertise file add the following config:
spring.h2.console.enabled=true

Run the application and then you can navigate the H2 console on the following URL:
http://localhost:8080/h2-console

Connect to H2 Database:
=======================
By default H2 DB will be started with you application
And the DB url will be generated dynamically, each time a new one when you start.
So we need to fix the URL of DB using application.propertise file config

spring.datasource.url=jdbc:h2:mem:testdb

Then run your application and access H2 Console
http://localhost:8080/h2-console

You H2 DB will be empty, we need to have some tables in there.
In order to add the table we can have a resource file name schema.sql

Schema.sql:
===========
CREATE TABLE COURSE (
  id BIGINT NOT NULL PRIMARY KEY, --IDENTITY,
  name NVARCHAR(MAX) NOT NULL,
  author NVARCHAR(MAX) NOT NULL
);

The Spring framework when found this file at startup, it'll automatically create this table or run the specified SQL command.



===========
Using JDBC:
===========

Using JDBCTemplate class:
=========================
1. Create a JdbcTemplate class object. Set it with @Autowired
2. Define a query string var sql = """DELETE FROM COURSE WHERE ID = ?"""
3. For Insert, Update, Delete calls the JdbcTemplete object's update method
4. Pass Query with the arguments for ? place holders as param.
   jdbcTemplateObj.update(sql, courseObj.getId());
5. For SELECT Query for 1 record use the queryForObject method
   var sql = "SELECT * FROM COURSE WHERE ID = ?;";
   jdbcTemplateObj.queryForObject(sql, new BeanPropertyRowMapper<>(Course.class), id);
6. For SELECT Query for multiple records use the query method
   var sql = "SELECT * FROM COURSE;";
   jdbcTemplateObj.query(sql, new BeanPropertyRowMapper<>(Course.class), id);
7. You can only use the BeanPropertyRowMapper if the name of DB columns are same as the property names.
   Otherwise you have to have a CustomMapper implementation.

RowMapper:
==========
BeanPropertyRowMapper:

The things which map DB result set to a Bean is called RowMapper.
//ResultSet => Bean => Row Mapper => BeanPropertyRowMapper<>(YourBeanClassName.class)
The property in Bean and DB columns should be same for it to work automatically


You can create your custom mapper as well by implementing RowMapper interface
public class Course implements RowMapper {
  public Course mapRow(ResultSet rs, int rowNum) throws SQLException {
    Course c = new Course();
	c.setId(rs.getLong("id"));
	c.setName(rs.getString("name"));
	c.setAuthor(rs.getString("author"));	
	return c;
  }
}

Executing Queries On Startup:
=============================
In order to directly run the queries when application starts you need an implementation of
CommandLineRunner interface with one method called run. Then Spring framework will run it on startup.

@Service
public class CourseJdbcCommandLineRunner implements CommandLineRunner {
  @Autowired
  private CourseJdbcRepository repo;
  
  public void run(Sring... args) throws Exception {
    repo.insert(new Course(1, "abc", "def"));
	repo.insert(new Course(2, "ghi", "jkl"));
	repo.findById(1)
	var courses = repo.retrieveAllCourses();
	var course = repo.findById(1);
	repo.deleteById(2);
  }
}



==========================
Using JPA instead of JDBC:
==========================
You directly map your Bean with the DB Table using 
@Entity(name="TableName"), @Id, @Column(name="colName") Annotation:

EntityManager Class:
====================
When working with JDBC you use JdbcTemplate class, similary
When working with JPA you use EntityManager class.

@Entity Annotation for DB Entity:
@ColumnName Annotation: You can use this if you column names are not not identical to properties name
@Id Annotation for defining Primary Key
@PersistenceContext for JPA EntityManager instead of @Autowired.
@Transactional you need this annotation for executing queries with JPA.
@NamedQuery you can define a named query using this annotation.

spring.jpa.show-sql=true: Set this configuration to seeing what queries JPA are running.

1. Set Course class as @Entity for Table in DB
2. Set Id field as @ID annotation for PK
3. Create an EntityManager bean for and mark it with @Autowired annotation.
   Instead of autowired you can use a @PersistenceContext annotation for specifically   
4. For insert call entityManagerObj.merge(courseObj)
5. For select call entityManagerObj.find(Course.class, id)
6. For Delete just call remove method after find method.
   var c = entityManagerObj.find(Course.class, id);
   entityManagerObj.remove(c);
7. For selecting all, create a named query first and then call getResultList method on it
   @Entity
   @NamedQuery(name="getAllCourses", query="SELECT C FROM Course C")
   public class Course {
   }
   var query = entityManager.createNamedQuery("getAllCourses", Course.class);
   return query.getResultList();




=====================================
Using Spring Data JPA instead of JPA:
=====================================

