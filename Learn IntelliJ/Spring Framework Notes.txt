Starting Spring Framework Application
https://start.spring.io

Tight Coupling:
===============
Tight coupling / Functional Dependency, of code means when 2 pieces of code are closely connected with each other to perform a function.

Loose Coupling:
===============
In Loose Coupling of code, code are functionally independent of each other.

Wiring of Dependencies:
=======================
Process of identifying the dependencies of a Bean.
Wiring of dependency means injecting the dependency of bean:
Wiring can be done in 2 ways:

Explicit Wiring: 
================
Where you create and pass object to another object explicitly.

Implicit or Auto Wiring: 
========================
Where you let the Spring framework to create the object and wire them together.

Spring Architecture:
====================
1. Launch Spring Context (AnnotationConfigApplicationContext) using @Configuration Class as parameter.
2. Configure the things we want Spring to manage using @Configuration Class 
3. Things which is managed by Spring is called Spring Beans

 ================================         POJOs          Config                      Spring Modules             
| JVM                            |           \             /            ___________________|_________________________________
|  ============================  |            \           /            |         |              |          |           |     |
| | Spring Context             | |            IOC Container        Spring Core  Spring Test  Spring MVC  Spring JDBC  JMS  Testing
| |  =======   =======         | |                  |
| | | Bean1 | | Bean2 |        | |                  |
| | |       | |       |        | |             Ready System                                 Spring Projects
| |  =======   =======         | |                                                                  |
| |                            | |                          -------------------------------------------------------------
|  ============================  |                         |                  |              |             |             |
|                                |                  Spring Integration   Spring Boot   Spring Cloud   Spring Data   Spring Security  
 ================================

Spring Container = Spring Context = IoC Container 

IoC = Inversion of Control, Shifting the responsibility of creating Object, resolving it's dependencies and wiring them together is IoC

DI = Dependency Injection, Identfying Bean, their dependencies and wire them together to create objects via reflection.

There are 2 type of Spring Containers:

1. Bean Container: Basic Spring Container
2. Application Context" Advance Spring Container with Enterprise-Specific features

Spring Configuration:
=====================

Defined using @Configuratin annotation on a class found in the package:

org.springframework.context.annotation.Configuration

@Configuration
public class MyClassConfiguration


@Configuration Annotation:
==========================
Defined on class level. It indicate the primary purpose of the class is to define Spring Bean.
It also defines other Bean dependencies.

@Configuration
public class MySpringConfiguration { }

@Bean Annotation:
=================
@Bean annotation defines a Spring Bean. It is applied on method level. 
An spring bean is something that is managed by Spring framework.

@Configuration
public class MySpringConfiguration { 
  @Bean(name = "YourCustomBeanName")
  public String name() {
    return "Your Name";
  }  
  @Bean
  public int age() {
    return 20;
  }
}

AnnotationConfigApplicationContext(YourConfigurationClass.class):
=================================================================
It is used to launch a Spring context inside JVM and pass the Beans Configurations.
Than using this context you can do many things.

var context = new AnnotationConfigApplicationContext(MySpringConfiguration.class);
var name = context.getBean("YourCustomBeanName");
var age = context.getBean("age");
var address = context.getBean(Address.class);

POJO (Plain Old Java Object):
=============================
Any java object is a POJO, no constraints.

Java Bean (EJB):
================
Any object is an Enterprise Java Beans if it follows following:

1. Public no args constructor.
2. Have getter and Setters.
3. Implements Serializable.

Spring Bean:
============
Any Java Object which is managed by Spring Context IOC container is called Spring Bean.

@Primary Annotation:
====================
This annotation is applied on Spring Bean to annotate that it is a primary bean in case
if more than 1 type of this bean implementatin is found using BeanName.class method.

@Bean(name= "person1")
@Primary
public Person person1() { return new Person("ABC", 10); }

@Bean(name= "person2")
@Primary
public Person person2() { return new Person("GHI", 27); }

context.getBean(Person.class); //will always return the bean marked as Primary.

@Qualifier("QualifierName"):
============================
Qualified attribute allow to autowired a bean using it's defined qualifier.

@Bean(name= "person1")
@Primary
public Person person1() { return new Person("ABC", 10); }

@Bean(name= "person2")
@Primary
public Person person2() { return new Person("GHI", 27); }

@Bean(name= "person3")
@Qualifier("personQualifier")
public Person person3() { return new Person("XYZ", 54); }

You can then auto wire this bean into another bean.
public Person person4(@Qualifier("personQualifier") Person person); //This will always pass the person3 object into another bean.

@Component:
===========
An instance of class will be managed by Spring Framework

This annotation makes any class a Spring Bean available for Auto Wiring and managed by Spring Framewrok

@Component
public class ABC {
}

Then this class instances will be auto wired and passed to the classes whenever is required.

We can also use @Primary and @Qualifier annotation with @Component annotation

@ComponentScan:
===============
This annotation defines in which package and sub packages to look for component definition.

@ComponentScan("com.in28minutes.learningspringframework.game") //In the named package and all it's sub packages
@ComponentScan //Current Package and all sub packages

Then the spring frame will look in this package plus all it's sub packages for Component annotation for auto wiring.
If you remove the package name the Component Scan will always be performed in current package and all the sub packages.

@Autowired:
===========
This annotation used with Field Injections to specify that the object of this will be passed by Spring framework.
When you use @Autowired, it'll always give you the preferred Primary Component implementation.

All the field and setter injections required AutoWired annotation.

@Qualifier:
===========
@Qualifier("qualifierName")
This Qualifier is used when more than 1 implementation of the Component is present.
If there is no @Qualifier annotation mentioned you can still use the name of the Spring Bean
Starting with small case character. This qualifier is implicitly available.

@Component
public class ImplicitQualifierName { }

On this class there is an implicit Qualifier avilable with the name Qualifier("implicitQualifierName")

Type of Injections:
===================

Constructor Based Injection:
============================
This is the recomended injection no autowired is required

@Component
public class Dependency1 {}

@Component
@ComponentScan
public class ClassName {
   private Dependency1 dep1;   
   public ClassName(Dependency1 dep1) {
      super();
	  this.dep1 = dep1;
   }
}

Setter Based Injection:
=======================
It required us to set the setter as Autowired

@Component
public class Dependency1 {}

@Component
@ComponentScan
public class ClassName {
   private Dependency1 dep1;   
   
   @Autowired
   public void setDep1(Dependency1 dep1) {      
	  this.dep1 = dep1;
   }
}

Field Based Injection:
======================
With field injection you must have to specify @Autowired and/or @Qualifier annotation.

@Component
public class Dependency1 {}

@Component
@ComponentScan
public class ClassName {
   @Autowired
   private Dependency1 dep1;
}

@Lazy vs Eager Initialization:
==============================
Eager initialization is when all the Beans are initialized at Application Startup, this is recomended.
Lazy initialization can be enforced using @Lazy annotation.
If something is lazy initialized, it can only be instantiated once someone try to use it.
It can be applied to @Component or @Bean or @Configuration levels.
If applied at @Configuration level then all the @Bean defined in that configuration will be initialized lazy.

@Component
@Lazy
public class ClassName {}

@Configuration
@Lazy //All beans defined in this class are lazy initialized because of @Lazy + @Configuration
public class ConfigClass {
   @Bean //This will be lazy initialized due to @Lazy annotation at class level
   public int ABC() { return 0; }
}

@Bean vs @Component:
====================
@Bean is applied on methods
@Component is applied on Classes.
@Bean you have to write Object creation code
@Bean is for scenarios where You have to create objects which doesn't support Dependency Injections
For example 3rd party libraries, In situations where you need to do alot of validations before creating object.
@Component is recomended way of creating objets.

J2EE = JavaEE = JakartaEE:
==========================
Previously is was J2EE, Java2 Enterprise Edition, 
Then it becomes Java EE, Java Platform Enterprise Edition
Then Oracle Foundation gave Java EE rights to Eclipse foundation and it becomes:
JakartaEE, Jakarta Enterprise Edition.

Important specifications of Jakarta EE:
=======================================
JSP    = Jakarta Server Pages Specification
JSTL   = Jakarta Standard Tag Library Specification
EJB    = Jakarta Enterprise Bean Specification
JAX-RS = Jakarta RESTful Web Services Specification
       = Jakarta Bean Validation Specification
CDI    = Jakarta Context and Dependency Injection Specification, Spring implements CDI specification.
JPA    = Jakarta Persistence API Specification

These are specification, or interfaces there are no implementations to it. 
Spring framework provide it's own implementatin of CDI specification.

All the important Annotation so far in Spring:
==============================================

01. new AnnotationConfigApplicationContext("NameOfClassConfigurationAnnotation") - Start Spring Context/Container using Java Config
02. new ClassPathXmlApplicationContext("SpringBeanXMLConfigurationFilePath.xml") - Start Spring Context/Container using Java Config
02. @Configuration: This annotation defines a Java Configuration for Spring Context/Container to start in this file you can define Beans
03. @Bean("beanName"): The definition of Bean indicates that a method returns a Bean, this is defined in a class with @Configuration
04. @Component: Indicate that an annotated class is a component
05. @ComponentScan("package name"): Define specific package to search for Components.
06. @Primary: Indicate that a Bean should be given preference if multiple beans are qualified for autowiring.
07. @Qualifier("qualifierName"): Used on a field or parameter as a qualifier for candidate bean when autowiring.
08. @Autowired: Indicate that a field and property value is automatically inserted.
09. @Lazy: Indicate that the Bean will only be initialized when it is requested.
10. @Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE)  //SCOPE_PROTOTYPE or SCOPE_SINGLETON, singleton is by default.
11. @PostConstruct: Indicate the code to be executed after the Bean is constructed
12. @PreDestroy: Indicate the code to be executed before the Bean is destryoed

StereoType Annotation:
======================
These are more specific annotation for @Component annotation.

13. @Service    : Specialization of @Component annotation, Indicate that a component is a business logic
14. @Controller : Specialization of @Component annotation, Indicate that a component is a Controller like WebController, APIController
15. @Repository : Specialization of @Component annotation, Indicate that a component is talking to Database

Jakarta CDI annotation, some annotaion which are also supported by Spring:
==========================================================================
16. @Named  = Same as Component
17. @Inject = Same as Autowired
18. @Qualifier
19. @Scope
20. @Singleton